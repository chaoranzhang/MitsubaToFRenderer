#!bin/bash
 
# Acknowledging Ioannis Gkioulekas for giving most of the instructions. The instructions are tested on ubuntu 16.04
=======================================
 
# Get basic packages
sudo apt-get update
sudo apt-get upgrade
# For ubuntu 18.04 libpng12-dev was dropped so we need to install libpng-dev instead
# For ubuntu 18.04 libboost1.58-all-dev was not available so you have to download and install manually
## If you run into a compilation error regarding the bind function of boost, that might mean that you are using a version of boost that is too new.
# For ubuntu 18.04 libpng3 is not available (need to test if only having libpng-dev works)
# For ubuntu 18.04 libapache2-svn is now called libapache2-mod-svn
# Mitsuba needs OpenGL to be installed so we need to add opengl info below. 
# Needed to also install curl because of command used in future steps
sudo apt-get install subversion git-core mercurial keychain openssh-client openssh-server g++ g++-multilib build-essential zip unzip p7zip-full python2.7 python-dev apt-file vim scons qt4-dev-tools libpng12-dev libjpeg8 libjpeg8-dev libpng3 libilmbase-dev libxerces-c-dev libglewmx1.6-dev libxxf86vm-dev libbz2-dev htop zlib1g-dev aptitude dkms gedit-plugins gedit-latex-plugin ntp gnome-terminal gimp gimp-ufraw ufraw ufraw-batch dcraw valgrind linux-tools-common smartmontools libapache2-mod-perl2 gnome-disk-utility libapache2-svn subversion-tools gnome-system-tools unrar xml-twig-tools linux-headers-$(uname -r) rsync inkscape irssi mutt s3cmd meshlab openexr libopenexr-dev openexr-viewers libgnome2-bin gparted ubuntu-restricted-extras uml-utilities gpick gnome-color-manager libfftw3-3 libfftw3-dev libboost1.58-all-dev pkg-config curl

# NOTE: If you installed libboost1.58 or any version manually the python API for mitsuba will most likely not compile because it will not be able to find libboost_python. To fix this issue you will have to figure out the path for libboost_python (in my case it was /usr/local/lib) and modify the find_boost_python method in `data/scons/detect_python.py` to find the correct path to boost for python

# (OPTIONAL) Install collada (needed if you want to enable mtsimport plugin)
# Make sure that the collada paths are set in the config.py file
#       COLLADAINCLUDE = ['/usr/include/collada-dom2.4', '/usr/include/collada-dom2.4/1.4']
#       COLLADALIB     = ['collada-dom2.4-dp']
# The above paths are different from latest mitsuba release. I got them from the development version in Github
sudo apt-get install collada-dom2.4

# Preparation for installations
mkdir ~/Downloads
mkdir ~/install_dirs
echo -e 'PKG_CONFIG_PATH="/usr/local/lib/pkgconfig"' | sudo tee -a /etc/environment > /dev/null
source /etc/environment



# Install and link eigen
curl -L -o ~/Downloads/eigen-3.2.10.zip http://bitbucket.org/eigen/eigen/get/3.2.10.zip
cd ~/install_dirs/
unzip ~/Downloads/eigen-3.2.10.zip 
mv eigen-eigen-* eigen_3.2.10
sudo chown -R root:root eigen_3.2.10/
sudo mv eigen_3.2.10/ /usr/local/
cd /usr/local/
sudo ln -sf eigen_3.2.10/ eigen
sudo ln -sf eigen_3.2.10/ eigen3
cd /usr/include/
sudo ln -sf /usr/local/eigen eigen3
cd
 
# Install Mitsuba
git clone https://github.com/cmu-ci-lab/MitsubaToFRenderer.git 
cd MitsubaToFRenderer 
scons --clean
## In Ubuntu 18.04 At this point when trying to compile I got the following two errors:
##### - include/mitsuba/core/constants.h:58:32: error: unable to find numeric literal operator ‘operator""f’
##### #define RCPOVERFLOW_FLT   0x1p-128f
##### include/mitsuba/core/constants.h:58:27: error: exponent has no digits
#####  #define RCPOVERFLOW_FLT   0x1p-128f
## The compiler suggested to use the following CXXFLAG -std=gnu++11 which can be changed in the config.py
## After changing that flag the compilation continues to fail because:
##### /usr/bin/ld: cannot find -lGL
## After installing opengl and reinstalling libglewmx I then get some errors regarding the PLY parser
## The following Mitsuba thread explains the issue and a workaround: https://github.com/mitsuba-renderer/mitsuba/issues/7
## At this point I was able to succesfully compile
scons
cd

# Replace <INST_PATH> with your installation location
export MITSUBA_INST_PATH=/home/user/repos/MitsubaToFRenderer
echo -e 'mitsuba_plugin_dir='${MITSUBA_INST_PATH}"/dist/plugins" | sudo tee -a /etc/environment > /dev/null
sudo sed -e '/^PATH/s/"$/:\/home\/user\/repos\/MitsubaToFRenderer\/dist"/g' -i /etc/environment
source /etc/environment
echo ${MITSUBA_INST_PATH}"/dist" | sudo tee /etc/ld.so.conf.d/mitsuba.conf > /dev/null
sudo ldconfig
 
# Add the following lines to your ~/.bashrc file so that you can run mitsuba from anywhere.
# Make sure to replace the python version with your own.
#   export MITSUBA_PYVER=2.7
#   export MITSUBA_DIR=/home/user/repos/MitsubaToFRenderer
#   source $MITSUBA_DIR/setpath.sh
# Source the bashrc file
source ~/.bashrc

# Reboot for changes to take effect
sudo reboot

# Follow USAGE.txt to render scenes with various settings. The output of mitsuba will be an exr file
# Follow INSTALLEXR2avi.txt to view the exr file in MATLAB and/or save them as avi/png (You can also use any freely available exr readers)
